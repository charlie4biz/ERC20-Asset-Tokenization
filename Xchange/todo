Populate and use permissions

Schedule Operation 
Create Schedule
Approve Schedule
Distribute Token

Market Operation 
Buy Share
Sell Share
Cancel Sell
Update Sell
Trade Histories

Shares Operation : Shares Wallet
Transfer
Request Buyback


Share Distributio
Have a Distribution rule, where the admin state what percentage weight should be used for distribution on each level
Then if admin chooses to use a percentage rule, this rule will apply, if not admin enters a fixed amount.
Note :  
For user experience calculations and validation should be done in real time, all percentage must sum up to 100%. all fixed amount must sum up to the total amount on the schedule, then calculations showing how much each persons will get based on the distribution rule set and the schedule amount.

Once a schedule is created an email notification containing the breakdown and details of the schedule is sent to the approvals and a link to the schedule to be signned on the platform

Once a schedule has been approved, update schedule to approved on the db 

There will be two golang job services listening on the db
the first will continue to scout the schedule db for schedules with schedule status of "approved", it picks it up and creates an allocation entry for that schedule on the db, with status false, the second service will continue to scout the allocation entry table and process all entries with status false, once allentries have been processed, it updates the schedule to completed


Documentation :
Gitbook
Makedocs
https://scotch.io/tutorials/nodejs-cron-jobs-by-examples

handle mongo duplicate error
read email body and other no config settings from a json file
improve UI of Email
Implement Audit Trail

endpoint for audit trail
add reset pin functionality by sending otp to user mobile and asking for password
allow export of allocations based on different filters
ensure no logging of sensitive data
ensure setApprovals rymes with number of approvals added